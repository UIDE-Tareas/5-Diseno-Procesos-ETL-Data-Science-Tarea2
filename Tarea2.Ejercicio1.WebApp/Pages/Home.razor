@page "/"
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@using Tarea2.Ejercicio1.WebApi
@inject IHttpClientFactory HttpFactory

<PageTitle>BOE - Consultar Policía</PageTitle>

        <h3 class="text-center text-primary mb-4">🔍 Consultar Policía</h3>

        <div class="input-group mb-3">
            <span class="input-group-text bg-primary text-white">
                <i class="bi bi-search"></i>
            </span>
            <input value="@searchQuery"
                   @oninput="OnSearchInput"
                   class="form-control border-primary shadow-sm"
                   placeholder="Escribe nombre o apellidos..." />
        </div>

      
        @if (isLoading)
        {
            <div class="text-center my-3">
                <div class="spinner-border text-primary" role="status"></div>
                <p class="mt-2 text-muted">Buscando...</p>
            </div>
        }
        else if (candidate is not null)
        {
            <div class="card border-success mt-3">
                <div class="card-header bg-success text-white fw-bold">
                    Resultado encontrado ✅
                </div>
                <div class="card-body">
                    <h5 class="card-title text-success">@candidate.Name @candidate.LastName</h5>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item"><strong>DNI:</strong> @candidate.Dni</li>
                        <li class="list-group-item"><strong>Orden:</strong> @candidate.Order</li>
                        <li class="list-group-item"><strong>Calificación:</strong> @candidate.FinalScore</li>
                        <li class="list-group-item"><strong>Página Documento:</strong> @candidate.DocumentPageNumber</li>
                        <li class="list-group-item"><strong>Página PDF:</strong> @candidate.PdfPageNumber</li>
                    </ul>
                </div>
            </div>
        }
        else if (notFound)
        {
            <div class="alert alert-warning text-center mt-3">
                ⚠️ No se encontró ningún candidato.
            </div>
        }
        else if (!string.IsNullOrEmpty(searchQuery))
        {
            <p class="text-center text-muted">🧭 Escribiendo...</p>
        }
        else
        {
            <p class="text-center text-muted">✏️ Escribe un nombre o apellidos para buscar.</p>
        }
   

@code {
    private string searchQuery = string.Empty;
    private BoePoliceCandidate? candidate;
    private bool isLoading = false;
    private bool notFound = false;
    private CancellationTokenSource? cts;

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        Console.WriteLine($"🟢 Evento OnSearchInput ejecutado: '{searchQuery}'");

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            candidate = null;
            notFound = false;
            isLoading = false;
            cts?.Cancel();
            await InvokeAsync(StateHasChanged);
            return;
        }

        cts?.Cancel();
        cts = new CancellationTokenSource();

        try
        {
            isLoading = true;
            notFound = false;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(400, cts.Token);

            var client = HttpFactory.CreateClient("ApiLocal");
            var url = $"api/candidates/search?query={Uri.EscapeDataString(searchQuery)}";
            Console.WriteLine($"🌐 Solicitando: {client.BaseAddress}{url}");

            var response = await client.GetAsync(url, cts.Token);
            if (response.IsSuccessStatusCode)
            {
                candidate = await response.Content.ReadFromJsonAsync<BoePoliceCandidate>(cancellationToken: cts.Token);
                notFound = false;
                Console.WriteLine("✅ Registro encontrado");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                candidate = null;
                notFound = true;
                Console.WriteLine("⚠️ No se encontró registro");
            }
        }
        catch (TaskCanceledException)
        {
            Console.WriteLine("⏹️ Búsqueda cancelada");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error en búsqueda: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
